{"version":3,"sources":["../../../src/components/config/dsUpgrade.js"],"names":["_","DatasourceUpgrader","backendSrv","alertSrv","$q","self","get","then","resp","meta","code","set","message","reject","configureDatasource","body","apiKey","results","datasources","graphite","elastic","forEach","ds","name","getDatasources","promises","type","url","access","basicAuth","basicAuthPassword","basicAuthUser","jsonData","push","post","isMatch","put","id","merge","database","esVersion","interval","timeField","all"],"mappings":"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","file":"dsUpgrade.js","sourcesContent":["import _ from 'lodash' ;\n\nexport default class DatasourceUpgrader {\n  constructor(backendSrv, alertSrv, $q) {\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.$q = $q;\n  }\n\n  upgrade() {\n    var self = this;\n    this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/_key')\n    .then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get current apiKey\", resp.message, 'error', 10000);\n        return self.$q.reject(resp.message);\n      }\n      return self.configureDatasource(resp.body.apiKey);\n    });\n  }\n\n  getDatasources() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources')\n    .then((results) => {\n      var datasources = {\n        graphite: null,\n        elastic: null\n      };\n      _.forEach(results, function(ds) {\n        if (ds.name === \"raintank\") {\n          datasources.graphite = ds;\n        }\n        if (ds.name === \"raintankEvents\") {\n          datasources.elastic = ds;\n        }\n      });\n      return datasources;\n    });\n  }\n\n  configureDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return this.getDatasources().then(function(datasources) {\n      var promises = [];\n      var graphite = {\n        name: 'raintank',\n        type: 'graphite',\n        url: 'https://tsdb-gw.raintank.io/graphite/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: self.apiKey,\n        basicAuthUser: \"api_key\",\n        jsonData: {}\n      };\n      if (!datasources.graphite) {\n        // create datasource.\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      } else if (!_.isMatch(datasources.graphite, graphite)) {\n        // update datasource if necessary\n        promises.push(self.backendSrv.put('/api/datasources/' + datasources.graphite.id, _.merge({}, datasources.graphite, graphite)));\n      }\n\n      var elastic = {\n        name: 'raintankEvents',\n        type: 'elasticsearch',\n        url: 'https://tsdb-gw.raintank.io/elasticsearch/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: self.apiKey,\n        basicAuthUser: \"api_key\",\n        database: '[events-]YYYY-MM-DD',\n        jsonData: {\n          esVersion: 2,\n          interval: \"Daily\",\n          timeField: \"timestamp\"\n        }\n      };\n\n      if (!datasources.elastic) {\n        // create datasource.\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      } else if (!_.isMatch(datasources.elastic, elastic)) {\n        // update datasource if necessary\n        promises.push(self.backendSrv.put('/api/datasources/' + datasources.elastic.id, _.merge({}, datasources.elastic, elastic)));\n      }\n\n      return self.$q.all(promises);\n    });\n  }\n}"]}