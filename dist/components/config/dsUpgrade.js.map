{"version":3,"sources":["../../../src/components/config/dsUpgrade.js"],"names":["_","DatasourceUpgrader","backendSrv","$q","apiKey","configureDatasource","resolove","self","get","then","resp","meta","code","reject","body","results","datasources","graphite","elastic","forEach","ds","name","getDatasources","promises","type","url","access","basicAuth","basicAuthPassword","basicAuthUser","jsonData","push","getKey","post","isMatch","put","id","merge","database","esVersion","interval","timeField","all"],"mappings":"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","file":"dsUpgrade.js","sourcesContent":["import _ from 'lodash' ;\n\nexport default class DatasourceUpgrader {\n  constructor(backendSrv, $q) {\n    this.backendSrv = backendSrv;\n    this.$q = $q;\n    this.apiKey = \"\";\n  }\n\n  upgrade() {\n    return this.configureDatasource();\n  }\n\n  getKey() {\n    if (this.apiKey !== \"\") {\n      return this.$q.resolove(this.apiKey);\n    }\n    var self = this;\n    return this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/_key')\n    .then((resp) => {\n      if (resp.meta.code !== 200) {\n        return self.$q.reject(\"failed to get current apiKey\");\n      }\n      return resp.body.apiKey;\n    });\n  }\n\n  getDatasources() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources')\n    .then((results) => {\n      var datasources = {\n        graphite: null,\n        elastic: null\n      };\n      _.forEach(results, function(ds) {\n        if (ds.name === \"raintank\") {\n          datasources.graphite = ds;\n        }\n        if (ds.name === \"raintankEvents\") {\n          datasources.elastic = ds;\n        }\n      });\n      return datasources;\n    });\n  }\n\n  configureDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return this.getDatasources().then(function(datasources) {\n      var promises = [];\n      var graphite = {\n        name: 'raintank',\n        type: 'graphite',\n        url: 'https://tsdb-gw.raintank.io/graphite/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        jsonData: {}\n      };\n      if (!datasources.graphite) {\n        // create datasource.\n        promises.push(self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return self.backendSrv.post('/api/datasources', graphite);\n        }));\n      } else if (!_.isMatch(datasources.graphite, graphite)) {\n        // update datasource if necessary\n        promises.push(self.getKey().then((apiKey) => {\n          graphite.basicAuthUser = \"api_key\";\n          graphite.basicAuthPassword = apiKey;\n          return self.backendSrv.put('/api/datasources/' + datasources.graphite.id, _.merge({}, datasources.graphite, graphite));\n        }));\n      }\n\n      var elastic = {\n        name: 'raintankEvents',\n        type: 'elasticsearch',\n        url: 'https://tsdb-gw.raintank.io/elasticsearch/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: \"\",\n        basicAuthUser: \"\",\n        database: '[events-]YYYY-MM-DD',\n        jsonData: {\n          esVersion: 2,\n          interval: \"Daily\",\n          timeField: \"timestamp\"\n        }\n      };\n\n      if (!datasources.elastic) {\n        // create datasource.\n        promises.push(self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return self.backendSrv.post('/api/datasources', elastic);\n        }));\n      } else if (!_.isMatch(datasources.elastic, elastic)) {\n        // update datasource if necessary\n        promises.push(self.getKey().then((apiKey) => {\n          elastic.basicAuthUser = \"api_key\";\n          elastic.basicAuthPassword = apiKey;\n          return self.backendSrv.put('/api/datasources/' + datasources.elastic.id, _.merge({}, datasources.elastic, elastic));\n        }));\n      }\n\n      return self.$q.all(promises);\n    });\n  }\n}"]}