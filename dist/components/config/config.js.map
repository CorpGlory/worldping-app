{"version":3,"sources":["../../../src/components/config/config.js"],"names":["configTemplate","_","WorldPingConfigCtrl","$scope","$injector","$q","backendSrv","alertSrv","validKey","quotas","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","appModel","jsonData","secureJsonData","enabled","validateKey","apiKeySet","self","p","get","then","resp","meta","code","set","message","reject","body","statusText","apiKey","errorMsg","model","resolve","initDatasource","importDashboards","url","datasourceSet","results","foundGraphite","foundElastic","forEach","ds","name","promises","graphite","type","access","push","post","elastic","database","esVersion","interval","timeField","all","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass WorldPingConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.validKey = false;\n    this.quotas = {};\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    if (this.appModel.enabled) {\n      this.validateKey();\n    }\n  }\n\n  reset() {\n    this.appModel.jsonData.apiKeySet=false;\n    this.validKey = false;\n  }\n\n  validateKey() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/v2/quotas');\n    p.then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get Quotas\", resp.message, 'error', 10000);\n        return self.$q.reject(resp.message);\n      }\n      self.validKey = true;\n      self.quotas = resp.body;\n    }, (resp) => {\n      if (self.appModel.enabled) {\n        self.alertSrv.set(\"failed to verify apiKey\", resp.statusText, 'error', 10000);\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invalid apiKey\";\n        this.validKey = false;\n      }\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      return this.$q.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      this.errorMsg = \"apiKey not set\";\n      this.validKey = false;\n      return this.$q.reject(\"apiKey not set.\");\n    }\n    model.jsonData.apiKeySet = true;\n    return this.initDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/worldping-home\",\n          message: \"worldPing app installed!\"\n        };\n      });\n    });\n  }\n\n  configureDatasource() {\n    this.appModel.jsonData.datasourceSet = false;\n    this.initDatasource().then(() => {\n      this.appModel.jsonData.datasourceSet = true;\n    });\n  }\n\n  initDatasource() {\n    var self = this;\n    //check for existing datasource.\n    var p = self.backendSrv.get('/api/datasources');\n    p.then(function(results) {\n      var foundGraphite = false;\n      var foundElastic = false;\n      _.forEach(results, function(ds) {\n        if (foundGraphite && foundElastic) { return; }\n        if (ds.name === \"raintank\") {\n          foundGraphite = true;\n        }\n        if (ds.name === \"raintankEvents\") {\n          foundElastic = true;\n        }\n      });\n      var promises = [];\n      if (!foundGraphite) {\n        // create datasource.\n        var graphite = {\n          name: 'raintank',\n          type: 'graphite',\n          url: 'api/plugin-proxy/raintank-worldping-app/api/graphite',\n          access: 'direct',\n          jsonData: {}\n        };\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      }\n      if (!foundElastic) {\n        // create datasource.\n        var elastic = {\n          name: 'raintankEvents',\n          type: 'elasticsearch',\n          url: 'api/plugin-proxy/raintank-worldping-app/api/elasticsearch',\n          access: 'direct',\n          database: '[events-]YYYY-MM-DD',\n          jsonData: {\n            esVersion: 1,\n            interval: \"Daily\",\n            timeField: \"timestamp\"\n          }\n        };\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      }\n      return self.$q.all(promises);\n    });\n    return p;\n  }\n}\n\nWorldPingConfigCtrl.template = configTemplate;\n\nexport {\n  WorldPingConfigCtrl as ConfigCtrl\n};\n"]}