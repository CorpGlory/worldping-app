{"version":3,"sources":["../../../src/components/config/config.js"],"names":["configTemplate","_","WorldPingConfigCtrl","$scope","$injector","$q","backendSrv","alertSrv","validKey","quotas","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","org","appModel","jsonData","secureJsonData","enabled","self","validateKey","then","validateDatasources","apiKeySet","errorMsg","p","get","resp","meta","code","set","message","reject","body","getOrgDetails","statusText","apiKey","millionChecksPerMonth","Math","ceil","parseInt","checksPerMonth","strChecksPerMonth","model","resolve","configureDatasource","importDashboards","url","getDatasources","datasources","graphite","elastic","access","elasitc","results","forEach","ds","name","promises","type","basicAuth","basicAuthPassword","basicAuthUser","push","post","isMatch","put","id","merge","database","esVersion","interval","timeField","all","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\n\nimport _ from 'lodash' ;\n\nclass WorldPingConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.validKey = false;\n    this.quotas = {};\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    this.org = null;\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    if (this.appModel.enabled) {\n      var self = this;\n      this.validateKey().then(() => {\n        self.validateDatasources();\n      });\n    }\n  }\n\n  reset() {\n    this.appModel.jsonData.apiKeySet=false;\n    this.validKey = false;\n    this.errorMsg = \"\";\n    this.org = null;\n  }\n\n  validateKey() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/v2/quotas');\n    p.then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get Quotas\", resp.message, 'error', 10000);\n        return self.$q.reject(resp.message);\n      }\n      self.validKey = true;\n      self.errorMsg = \"\";\n      self.quotas = resp.body;\n\n      self.getOrgDetails();\n    }, (resp) => {\n      if (self.appModel.enabled) {\n        self.alertSrv.set(\"failed to verify apiKey\", resp.statusText, 'error', 10000);\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invalid apiKey\";\n        self.validKey = false;\n      }\n    });\n    return p;\n  }\n\n  getOrgDetails() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/grafana-net/profile/org');\n    p.then((resp) => {\n      self.org = resp;\n\n      const millionChecksPerMonth = Math.ceil(parseInt(self.org.checksPerMonth, 10) / 100000) / 10;\n      if (millionChecksPerMonth > 1000) {\n        self.org.strChecksPerMonth = Math.ceil(millionChecksPerMonth / 1000) + ' Billion';\n      } else if (millionChecksPerMonth > 0) {\n        self.org.strChecksPerMonth = millionChecksPerMonth + ' Million';\n      } else {\n        self.org.strChecksPerMonth = 'N/A';\n      }\n    }, (resp) => {\n      self.alertSrv.set(\"failed to get Org Details\", resp.statusText, 'error', 10000);\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      model.jsonData.apiKeySet = false;\n      model.secureJsonData.apiKey = \"\";\n      return this.$q.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      this.errorMsg = \"apiKey not set\";\n      this.validKey = false;\n      return this.$q.reject(\"apiKey not set.\");\n    }\n    model.jsonData.apiKeySet = true;\n    return this.configureDatasource();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.appEditCtrl.importDashboards().then(() => {\n        return {\n          url: \"dashboard/db/worldping-home\",\n          message: \"worldPing app installed!\"\n        };\n      });\n    });\n  }\n\n  validateDatasources() {\n    var self = this;\n    return this.getDatasources().then((datasources) => {\n      if ((!datasources.graphite) || (!datasources.elastic)\n         || (datasources.graphite.access === \"direct\")\n         || (datasources.elasitc.access === \"direct\")) {\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.errorMsg = \"Datasource updates required. Please re-enter your apiKey.\";\n        return;\n      }\n    });\n  }\n\n  getDatasources() {\n    var self = this;\n    //check for existing datasource.\n    return self.backendSrv.get('/api/datasources')\n    .then((results) => {\n      var datasources = {\n        graphite: null,\n        elastic: null\n      };\n      _.forEach(results, function(ds) {\n        if (ds.name === \"raintank\") {\n          datasources.graphite = ds;\n        }\n        if (ds.name === \"raintankEvents\") {\n          datasources.elastic = ds;\n        }\n      });\n      return self.$q.resolve(datasources);\n    });\n  }\n\n  configureDatasource() {\n    var self = this;\n    //check for existing datasource.\n    return this.getDatasources().then(function(datasources) {\n      var promises = [];\n\n      var graphite = {\n        name: 'raintank',\n        type: 'graphite',\n        url: 'https://tsdb-gw.raintank.io/graphite/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: self.appModel.secureJsonData.apiKey,\n        basicAuthUser: \"api_key\",\n        jsonData: {}\n      };\n\n      if (!datasources.graphite) {\n        // create datasource.\n        promises.push(self.backendSrv.post('/api/datasources', graphite));\n      } else if (!_.isMatch(datasources.graphite, graphite)) {\n        // update datasource if necessary\n        promises.push(self.backendSrv.put('/api/datasources/' + datasources.graphite.id, _.merge({}, datasources.graphite, graphite)));\n      }\n\n      var elastic = {\n        name: 'raintankEvents',\n        type: 'elasticsearch',\n        url: 'https://tsdb-gw.raintank.io/elasticsearch/',\n        access: 'proxy',\n        basicAuth: true,\n        basicAuthPassword: self.appModel.secureJsonData.apiKey,\n        basicAuthUser: \"api_key\",\n        database: '[events-]YYYY-MM-DD',\n        jsonData: {\n          esVersion: 2,\n          interval: \"Daily\",\n          timeField: \"timestamp\"\n        }\n      };\n\n      if (!datasources.elastic) {\n        // create datasource.\n        promises.push(self.backendSrv.post('/api/datasources', elastic));\n      } else if (!_.isMatch(datasources.elastic, elastic)) {\n        // update datasource if necessary\n        promises.push(self.backendSrv.put('/api/datasources/' + datasources.elastic.id, _.merge({}, datasources.elastic, elastic)));\n      }\n\n      return self.$q.all(promises);\n    });\n  }\n}\n\nWorldPingConfigCtrl.template = configTemplate;\n\nexport {\n  WorldPingConfigCtrl as ConfigCtrl\n};\n"]}