{"version":3,"sources":["../../../src/components/config/config.js"],"names":["configTemplate","DatasourceUpgrader","WorldPingConfigCtrl","$scope","$injector","$q","backendSrv","alertSrv","validKey","quotas","appEditCtrl","setPreUpdateHook","preUpdate","bind","setPostUpdateHook","postUpdate","org","datasourceUpgrader","appModel","jsonData","secureJsonData","enabled","self","validateKey","then","upgrade","apiKeySet","errorMsg","p","get","resp","meta","code","set","message","reject","body","getOrgDetails","statusText","apiKey","millionChecksPerMonth","Math","ceil","parseInt","checksPerMonth","strChecksPerMonth","model","resolve","importDashboards","url","template"],"mappings":"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","file":"config.js","sourcesContent":["import configTemplate from './config.html!text';\nimport DatasourceUpgrader from './dsUpgrade';\n\nclass WorldPingConfigCtrl {\n  constructor($scope, $injector, $q, backendSrv, alertSrv) {\n    this.$q = $q;\n    this.backendSrv = backendSrv;\n    this.alertSrv = alertSrv;\n    this.validKey = false;\n    this.quotas = {};\n    this.appEditCtrl.setPreUpdateHook(this.preUpdate.bind(this));\n    this.appEditCtrl.setPostUpdateHook(this.postUpdate.bind(this));\n    this.org = null;\n    this.datasourceUpgrader = new DatasourceUpgrader(backendSrv, $q);\n\n    if (this.appModel.jsonData === null) {\n      this.appModel.jsonData = {};\n    }\n    if (!this.appModel.secureJsonData) {\n      this.appModel.secureJsonData = {};\n    }\n    if (this.appModel.enabled) {\n      var self = this;\n      this.validateKey().then(() => {\n        self.datasourceUpgrader.upgrade();\n      });\n    }\n  }\n\n  reset() {\n    this.appModel.jsonData.apiKeySet=false;\n    this.validKey = false;\n    this.errorMsg = \"\";\n    this.org = null;\n  }\n\n  validateKey() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/v2/quotas');\n    p.then((resp) => {\n      if (resp.meta.code !== 200) {\n        self.alertSrv.set(\"failed to get Quotas\", resp.message, 'error', 10000);\n        return self.$q.reject(resp.message);\n      }\n      self.validKey = true;\n      self.errorMsg = \"\";\n      self.quotas = resp.body;\n\n      self.getOrgDetails();\n    }, (resp) => {\n      if (self.appModel.enabled) {\n        self.alertSrv.set(\"failed to verify apiKey\", resp.statusText, 'error', 10000);\n        self.appModel.enabled = false;\n        self.appModel.jsonData.apiKeySet = false;\n        self.appModel.secureJsonData.apiKey = \"\";\n        self.errorMsg = \"invalid apiKey\";\n        self.validKey = false;\n      }\n    });\n    return p;\n  }\n\n  getOrgDetails() {\n    var self = this;\n    var p = this.backendSrv.get('api/plugin-proxy/raintank-worldping-app/api/grafana-net/profile/org');\n    p.then((resp) => {\n      self.org = resp;\n\n      const millionChecksPerMonth = Math.ceil(parseInt(self.org.checksPerMonth, 10) / 100000) / 10;\n      if (millionChecksPerMonth > 1000) {\n        self.org.strChecksPerMonth = Math.ceil(millionChecksPerMonth / 1000) + ' Billion';\n      } else if (millionChecksPerMonth > 0) {\n        self.org.strChecksPerMonth = millionChecksPerMonth + ' Million';\n      } else {\n        self.org.strChecksPerMonth = 'N/A';\n      }\n    }, (resp) => {\n      self.alertSrv.set(\"failed to get Org Details\", resp.statusText, 'error', 10000);\n    });\n    return p;\n  }\n\n  preUpdate() {\n    var model = this.appModel;\n    if (!model.enabled) {\n      model.jsonData.apiKeySet = false;\n      model.secureJsonData.apiKey = \"\";\n      return this.$q.resolve();\n    }\n\n    if (!model.jsonData.apiKeySet && !model.secureJsonData.apiKey) {\n      model.enabled = false;\n      this.errorMsg = \"apiKey not set\";\n      this.validKey = false;\n      return this.$q.reject(\"apiKey not set.\");\n    }\n    model.jsonData.apiKeySet = true;\n    return this.$q.resolve();\n  }\n\n  postUpdate() {\n    if (!this.appModel.enabled) {\n      return this.$q.resolve();\n    }\n    var self = this;\n    return this.validateKey()\n    .then(() => {\n      return self.datasourceUpgrader.upgrade().then(() => {\n        self.appEditCtrl.importDashboards().then(() => {\n          return {\n            url: \"dashboard/db/worldping-home\",\n            message: \"worldPing app installed!\"\n          };\n        });\n      });\n    });\n  }\n}\n\nWorldPingConfigCtrl.template = configTemplate;\n\nexport {\n  WorldPingConfigCtrl as ConfigCtrl\n};\n"]}